// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	filter "github.com/pehks1980/gb_go_best/kurs/app1/filter"
	mock "github.com/stretchr/testify/mock"
)

// Parse is an autogenerated mock type for the Parse type
type Parse struct {
	mock.Mock
}

// ParseCondition provides a mock function with given fields: cmd, colsMask
func (_m *Parse) ParseCondition(cmd []string, colsMask map[string]int) (*filter.Condition, error) {
	ret := _m.Called(cmd, colsMask)

	var r0 *filter.Condition
	if rf, ok := ret.Get(0).(func([]string, map[string]int) *filter.Condition); ok {
		r0 = rf(cmd, colsMask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filter.Condition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, map[string]int) error); ok {
		r1 = rf(cmd, colsMask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseHeading provides a mock function with given fields: fileCols, flgCols
func (_m *Parse) ParseHeading(fileCols []string, flgCols []string) (map[string]int, map[string]int) {
	ret := _m.Called(fileCols, flgCols)

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func([]string, []string) map[string]int); ok {
		r0 = rf(fileCols, flgCols)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	var r1 map[string]int
	if rf, ok := ret.Get(1).(func([]string, []string) map[string]int); ok {
		r1 = rf(fileCols, flgCols)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]int)
		}
	}

	return r0, r1
}
